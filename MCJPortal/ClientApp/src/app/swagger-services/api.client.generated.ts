/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.5.0 (NJsonSchema v10.1.7.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CountryService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCountries(): Observable<CountryViewModel[]> {
        let url_ = this.baseUrl + "/api/Country";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountries(<any>response_);
                } catch (e) {
                    return <Observable<CountryViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CountryViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountries(response: HttpResponseBase): Observable<CountryViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CountryViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CountryViewModel[]>(<any>null);
    }
}

@Injectable()
export class ListItemsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getListItems(typeId: ListTypeEnum): Observable<ListItemViewModel[]> {
        let url_ = this.baseUrl + "/api/ListItems/{typeId}";
        if (typeId === undefined || typeId === null)
            throw new Error("The parameter 'typeId' must be defined.");
        url_ = url_.replace("{typeId}", encodeURIComponent("" + typeId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListItems(<any>response_);
                } catch (e) {
                    return <Observable<ListItemViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListItemViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListItems(response: HttpResponseBase): Observable<ListItemViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListItemViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListItemViewModel[]>(<any>null);
    }
}

@Injectable()
export class PermissionsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getNotAllowedProperties(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Permissions/GetNotAllowedProperties";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNotAllowedProperties(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNotAllowedProperties(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetNotAllowedProperties(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }
}

@Injectable()
export class ProjectLineService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    update(model: ProjectLineViewModel): Observable<ProjectLineViewModel> {
        let url_ = this.baseUrl + "/api/ProjectLine/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ProjectLineViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProjectLineViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ProjectLineViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectLineViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjectLineViewModel>(<any>null);
    }

    getProjectLines(model: FilterProjectLinesModel): Observable<FilterResponseModelOfProjectLineTableViewModel> {
        let url_ = this.baseUrl + "/api/ProjectLine/GetProjectLines";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProjectLines(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProjectLines(<any>response_);
                } catch (e) {
                    return <Observable<FilterResponseModelOfProjectLineTableViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<FilterResponseModelOfProjectLineTableViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetProjectLines(response: HttpResponseBase): Observable<FilterResponseModelOfProjectLineTableViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FilterResponseModelOfProjectLineTableViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FilterResponseModelOfProjectLineTableViewModel>(<any>null);
    }

    getProjectLine(id: number): Observable<ProjectLineViewModel> {
        let url_ = this.baseUrl + "/api/ProjectLine/GetProjectLine/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProjectLine(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProjectLine(<any>response_);
                } catch (e) {
                    return <Observable<ProjectLineViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProjectLineViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetProjectLine(response: HttpResponseBase): Observable<ProjectLineViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectLineViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjectLineViewModel>(<any>null);
    }
}

@Injectable()
export class ProjectsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getUserProjects(userId: string | null | undefined, id: string): Observable<ProjectViewModel[]> {
        let url_ = this.baseUrl + "/api/Projects/GetUserProjects/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserProjects(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserProjects(<any>response_);
                } catch (e) {
                    return <Observable<ProjectViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProjectViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserProjects(response: HttpResponseBase): Observable<ProjectViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjectViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjectViewModel[]>(<any>null);
    }

    getProjects(): Observable<ProjectViewModel[]> {
        let url_ = this.baseUrl + "/api/Projects";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProjects(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProjects(<any>response_);
                } catch (e) {
                    return <Observable<ProjectViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProjectViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProjects(response: HttpResponseBase): Observable<ProjectViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjectViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjectViewModel[]>(<any>null);
    }

    getProjectDetails(projectId: number): Observable<ProjectViewModel> {
        let url_ = this.baseUrl + "/api/Projects/GetProjectDetails/{projectId}";
        if (projectId === undefined || projectId === null)
            throw new Error("The parameter 'projectId' must be defined.");
        url_ = url_.replace("{projectId}", encodeURIComponent("" + projectId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProjectDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProjectDetails(<any>response_);
                } catch (e) {
                    return <Observable<ProjectViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProjectViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetProjectDetails(response: HttpResponseBase): Observable<ProjectViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProjectViewModel>(<any>null);
    }
}

@Injectable()
export class AuthorizationService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    connect(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/auth/Connect";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConnect(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConnect(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processConnect(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class RolesService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RoleViewModel[]> {
        let url_ = this.baseUrl + "/api/Roles/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RoleViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoleViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RoleViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RoleViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoleViewModel[]>(<any>null);
    }

    getAllPermissions(roleId: string | null): Observable<EditPermissionViewModel[]> {
        let url_ = this.baseUrl + "/api/Roles/GetAllPermissions/{roleId}";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPermissions(<any>response_);
                } catch (e) {
                    return <Observable<EditPermissionViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<EditPermissionViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPermissions(response: HttpResponseBase): Observable<EditPermissionViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EditPermissionViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EditPermissionViewModel[]>(<any>null);
    }

    setPermission(model: EditPermissionViewModel[] | null | undefined, roleId: string | null): Observable<void> {
        let url_ = this.baseUrl + "/api/Roles/SetPermission/{roleId}?";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId)); 
        if (model !== undefined)
            model && model.forEach((item, index) => { 
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "model[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetPermission(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetPermission(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetPermission(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getPermissions(roleId: string | null | undefined): Observable<RolePermissionViewModel[]> {
        let url_ = this.baseUrl + "/api/Roles/GetPermissions?";
        if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPermissions(<any>response_);
                } catch (e) {
                    return <Observable<RolePermissionViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RolePermissionViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPermissions(response: HttpResponseBase): Observable<RolePermissionViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RolePermissionViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RolePermissionViewModel[]>(<any>null);
    }

    getUserRoles(userId: string | null | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Roles/GetUserRoles?";
        if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserRoles(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserRoles(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    setRole(data: RoleParams): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Roles/SetRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetRole(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processSetRole(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    removeRole(data: RoleParams): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Roles/RemoveRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveRole(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveRole(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    get(roleId: string | null | undefined): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Roles/Get?";
        if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    update(model: RoleViewModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Roles/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    insert(model: RoleViewModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Roles/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class SignUpService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    register(model: UserRegisterViewModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/SignUp/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    confirmEmail(model: ConfirmEmail): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/SignUp/ConfirmEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmEmail(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processConfirmEmail(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class UserService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getSettings(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/User/GetSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSettings(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSettings(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    changePassword(model: ChangePasswordViewModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/User/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    forgotPassword(model: ForgotPasswordViewModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/User/ForgotPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processForgotPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processForgotPassword(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processForgotPassword(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    resetPassword(model: ResetPasswordViewModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/User/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class UsersService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCurrentUserName(): Observable<string> {
        let url_ = this.baseUrl + "/api/Users/GetCurrentUserName";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUserName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUserName(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUserName(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    getCurrentUser(): Observable<UserViewModel> {
        let url_ = this.baseUrl + "/api/Users/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUser(<any>response_);
                } catch (e) {
                    return <Observable<UserViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUser(response: HttpResponseBase): Observable<UserViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserViewModel>(<any>null);
    }

    getAll(name: string | null | undefined, countryId: number | null | undefined): Observable<UserViewModel[]> {
        let url_ = this.baseUrl + "/api/Users/GetAll?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (countryId !== undefined)
            url_ += "countryId=" + encodeURIComponent("" + countryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<UserViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserViewModel[]>(<any>null);
    }

    update(model: UserViewModel): Observable<UserViewModel> {
        let url_ = this.baseUrl + "/api/Users/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<UserViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserViewModel>(<any>null);
    }

    create(model: UserViewModel): Observable<UserViewModel> {
        let url_ = this.baseUrl + "/api/Users/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<UserViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<UserViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserViewModel>(<any>null);
    }

    delete(id: string | null): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getUser(userId: string | null): Observable<ApplicationUser> {
        let url_ = this.baseUrl + "/api/Users/GetUser/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUser(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationUser>><any>_observableThrow(response_);
        }));
    }

    protected processGetUser(response: HttpResponseBase): Observable<ApplicationUser> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationUser>(<any>null);
    }
}

export class CountryViewModel implements ICountryViewModel {
    id!: number;
    name?: string | null;
    fileDoc?: string | null;

    constructor(data?: ICountryViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.fileDoc = _data["fileDoc"] !== undefined ? _data["fileDoc"] : <any>null;
        }
    }

    static fromJS(data: any): CountryViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CountryViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["fileDoc"] = this.fileDoc !== undefined ? this.fileDoc : <any>null;
        return data; 
    }
}

export interface ICountryViewModel {
    id: number;
    name?: string | null;
    fileDoc?: string | null;
}

export class ListItemViewModel implements IListItemViewModel {
    id!: string;
    listTypeId!: ListTypeEnum;
    value?: string | null;
    permissions?: RolePermissionViewModel[] | null;

    constructor(data?: IListItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.listTypeId = _data["listTypeId"] !== undefined ? _data["listTypeId"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(RolePermissionViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["listTypeId"] = this.listTypeId !== undefined ? this.listTypeId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListItemViewModel {
    id: string;
    listTypeId: ListTypeEnum;
    value?: string | null;
    permissions?: RolePermissionViewModel[] | null;
}

export enum ListTypeEnum {
    Staff = 1,
    LineStatus = 2,
    ProductGroup = 3,
    FileType = 4,
    Currency = 5,
    JobStatus = 6,
    ProductionType = 7,
    Suppliers = 8,
    Permission = 12,
    Material = 13,
}

export class RolePermissionViewModel implements IRolePermissionViewModel {
    roleId?: string | null;
    permissionId!: string;
    access!: AccessEnum;

    constructor(data?: IRolePermissionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.permissionId = _data["permissionId"] !== undefined ? _data["permissionId"] : <any>null;
            this.access = _data["access"] !== undefined ? _data["access"] : <any>null;
        }
    }

    static fromJS(data: any): RolePermissionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RolePermissionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["permissionId"] = this.permissionId !== undefined ? this.permissionId : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        return data; 
    }
}

export interface IRolePermissionViewModel {
    roleId?: string | null;
    permissionId: string;
    access: AccessEnum;
}

export enum AccessEnum {
    NoAccess = 0,
    View = 1,
    Edit = 2,
}

export class ProjectLineViewModel implements IProjectLineViewModel {
    id!: number;
    number!: number;
    description?: string | null;
    customerDescription?: string | null;
    barcode?: string | null;
    oldSystemPartNumber?: string | null;
    customerNumber?: string | null;
    oemNumber?: string | null;
    nickNameIndia?: string | null;
    nickNameAustralia?: string | null;
    economManufacturerQty?: number | null;
    inventoredItem?: number | null;
    maxStockQty?: number | null;
    minStockQty?: number | null;
    productionLocation?: string | null;
    rawCost?: number | null;
    processCost?: number | null;
    totalCost?: number | null;
    recoringToolingCost?: number | null;
    manualOrderQty?: number | null;
    totalOrderQty?: number | null;
    liveOrder?: number | null;
    materialId?: number | null;
    weight?: number | null;
    unitPackagedQty?: number | null;
    priceOld?: number | null;
    priceCurrent!: number;
    rackLocationAU?: string | null;
    salesOrderNumber?: string | null;
    productionTeamInstructions?: string | null;
    mjInstructions?: string | null;
    shippingTrackingNumber?: string | null;
    patternLocationAU?: string | null;
    patternLocationIND?: string | null;
    partDelivery?: number | null;
    backorderQty?: number | null;
    projectName?: string | null;
    fileDoc?: string | null;

    constructor(data?: IProjectLineViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.customerDescription = _data["customerDescription"] !== undefined ? _data["customerDescription"] : <any>null;
            this.barcode = _data["barcode"] !== undefined ? _data["barcode"] : <any>null;
            this.oldSystemPartNumber = _data["oldSystemPartNumber"] !== undefined ? _data["oldSystemPartNumber"] : <any>null;
            this.customerNumber = _data["customerNumber"] !== undefined ? _data["customerNumber"] : <any>null;
            this.oemNumber = _data["oemNumber"] !== undefined ? _data["oemNumber"] : <any>null;
            this.nickNameIndia = _data["nickNameIndia"] !== undefined ? _data["nickNameIndia"] : <any>null;
            this.nickNameAustralia = _data["nickNameAustralia"] !== undefined ? _data["nickNameAustralia"] : <any>null;
            this.economManufacturerQty = _data["economManufacturerQty"] !== undefined ? _data["economManufacturerQty"] : <any>null;
            this.inventoredItem = _data["inventoredItem"] !== undefined ? _data["inventoredItem"] : <any>null;
            this.maxStockQty = _data["maxStockQty"] !== undefined ? _data["maxStockQty"] : <any>null;
            this.minStockQty = _data["minStockQty"] !== undefined ? _data["minStockQty"] : <any>null;
            this.productionLocation = _data["productionLocation"] !== undefined ? _data["productionLocation"] : <any>null;
            this.rawCost = _data["rawCost"] !== undefined ? _data["rawCost"] : <any>null;
            this.processCost = _data["processCost"] !== undefined ? _data["processCost"] : <any>null;
            this.totalCost = _data["totalCost"] !== undefined ? _data["totalCost"] : <any>null;
            this.recoringToolingCost = _data["recoringToolingCost"] !== undefined ? _data["recoringToolingCost"] : <any>null;
            this.manualOrderQty = _data["manualOrderQty"] !== undefined ? _data["manualOrderQty"] : <any>null;
            this.totalOrderQty = _data["totalOrderQty"] !== undefined ? _data["totalOrderQty"] : <any>null;
            this.liveOrder = _data["liveOrder"] !== undefined ? _data["liveOrder"] : <any>null;
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.weight = _data["weight"] !== undefined ? _data["weight"] : <any>null;
            this.unitPackagedQty = _data["unitPackagedQty"] !== undefined ? _data["unitPackagedQty"] : <any>null;
            this.priceOld = _data["priceOld"] !== undefined ? _data["priceOld"] : <any>null;
            this.priceCurrent = _data["priceCurrent"] !== undefined ? _data["priceCurrent"] : <any>null;
            this.rackLocationAU = _data["rackLocationAU"] !== undefined ? _data["rackLocationAU"] : <any>null;
            this.salesOrderNumber = _data["salesOrderNumber"] !== undefined ? _data["salesOrderNumber"] : <any>null;
            this.productionTeamInstructions = _data["productionTeamInstructions"] !== undefined ? _data["productionTeamInstructions"] : <any>null;
            this.mjInstructions = _data["mjInstructions"] !== undefined ? _data["mjInstructions"] : <any>null;
            this.shippingTrackingNumber = _data["shippingTrackingNumber"] !== undefined ? _data["shippingTrackingNumber"] : <any>null;
            this.patternLocationAU = _data["patternLocationAU"] !== undefined ? _data["patternLocationAU"] : <any>null;
            this.patternLocationIND = _data["patternLocationIND"] !== undefined ? _data["patternLocationIND"] : <any>null;
            this.partDelivery = _data["partDelivery"] !== undefined ? _data["partDelivery"] : <any>null;
            this.backorderQty = _data["backorderQty"] !== undefined ? _data["backorderQty"] : <any>null;
            this.projectName = _data["projectName"] !== undefined ? _data["projectName"] : <any>null;
            this.fileDoc = _data["fileDoc"] !== undefined ? _data["fileDoc"] : <any>null;
        }
    }

    static fromJS(data: any): ProjectLineViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectLineViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["customerDescription"] = this.customerDescription !== undefined ? this.customerDescription : <any>null;
        data["barcode"] = this.barcode !== undefined ? this.barcode : <any>null;
        data["oldSystemPartNumber"] = this.oldSystemPartNumber !== undefined ? this.oldSystemPartNumber : <any>null;
        data["customerNumber"] = this.customerNumber !== undefined ? this.customerNumber : <any>null;
        data["oemNumber"] = this.oemNumber !== undefined ? this.oemNumber : <any>null;
        data["nickNameIndia"] = this.nickNameIndia !== undefined ? this.nickNameIndia : <any>null;
        data["nickNameAustralia"] = this.nickNameAustralia !== undefined ? this.nickNameAustralia : <any>null;
        data["economManufacturerQty"] = this.economManufacturerQty !== undefined ? this.economManufacturerQty : <any>null;
        data["inventoredItem"] = this.inventoredItem !== undefined ? this.inventoredItem : <any>null;
        data["maxStockQty"] = this.maxStockQty !== undefined ? this.maxStockQty : <any>null;
        data["minStockQty"] = this.minStockQty !== undefined ? this.minStockQty : <any>null;
        data["productionLocation"] = this.productionLocation !== undefined ? this.productionLocation : <any>null;
        data["rawCost"] = this.rawCost !== undefined ? this.rawCost : <any>null;
        data["processCost"] = this.processCost !== undefined ? this.processCost : <any>null;
        data["totalCost"] = this.totalCost !== undefined ? this.totalCost : <any>null;
        data["recoringToolingCost"] = this.recoringToolingCost !== undefined ? this.recoringToolingCost : <any>null;
        data["manualOrderQty"] = this.manualOrderQty !== undefined ? this.manualOrderQty : <any>null;
        data["totalOrderQty"] = this.totalOrderQty !== undefined ? this.totalOrderQty : <any>null;
        data["liveOrder"] = this.liveOrder !== undefined ? this.liveOrder : <any>null;
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        data["unitPackagedQty"] = this.unitPackagedQty !== undefined ? this.unitPackagedQty : <any>null;
        data["priceOld"] = this.priceOld !== undefined ? this.priceOld : <any>null;
        data["priceCurrent"] = this.priceCurrent !== undefined ? this.priceCurrent : <any>null;
        data["rackLocationAU"] = this.rackLocationAU !== undefined ? this.rackLocationAU : <any>null;
        data["salesOrderNumber"] = this.salesOrderNumber !== undefined ? this.salesOrderNumber : <any>null;
        data["productionTeamInstructions"] = this.productionTeamInstructions !== undefined ? this.productionTeamInstructions : <any>null;
        data["mjInstructions"] = this.mjInstructions !== undefined ? this.mjInstructions : <any>null;
        data["shippingTrackingNumber"] = this.shippingTrackingNumber !== undefined ? this.shippingTrackingNumber : <any>null;
        data["patternLocationAU"] = this.patternLocationAU !== undefined ? this.patternLocationAU : <any>null;
        data["patternLocationIND"] = this.patternLocationIND !== undefined ? this.patternLocationIND : <any>null;
        data["partDelivery"] = this.partDelivery !== undefined ? this.partDelivery : <any>null;
        data["backorderQty"] = this.backorderQty !== undefined ? this.backorderQty : <any>null;
        data["projectName"] = this.projectName !== undefined ? this.projectName : <any>null;
        data["fileDoc"] = this.fileDoc !== undefined ? this.fileDoc : <any>null;
        return data; 
    }
}

export interface IProjectLineViewModel {
    id: number;
    number: number;
    description?: string | null;
    customerDescription?: string | null;
    barcode?: string | null;
    oldSystemPartNumber?: string | null;
    customerNumber?: string | null;
    oemNumber?: string | null;
    nickNameIndia?: string | null;
    nickNameAustralia?: string | null;
    economManufacturerQty?: number | null;
    inventoredItem?: number | null;
    maxStockQty?: number | null;
    minStockQty?: number | null;
    productionLocation?: string | null;
    rawCost?: number | null;
    processCost?: number | null;
    totalCost?: number | null;
    recoringToolingCost?: number | null;
    manualOrderQty?: number | null;
    totalOrderQty?: number | null;
    liveOrder?: number | null;
    materialId?: number | null;
    weight?: number | null;
    unitPackagedQty?: number | null;
    priceOld?: number | null;
    priceCurrent: number;
    rackLocationAU?: string | null;
    salesOrderNumber?: string | null;
    productionTeamInstructions?: string | null;
    mjInstructions?: string | null;
    shippingTrackingNumber?: string | null;
    patternLocationAU?: string | null;
    patternLocationIND?: string | null;
    partDelivery?: number | null;
    backorderQty?: number | null;
    projectName?: string | null;
    fileDoc?: string | null;
}

export class FilterResponseModelOfProjectLineTableViewModel implements IFilterResponseModelOfProjectLineTableViewModel {
    data?: ProjectLineTableViewModel[] | null;
    total!: number;

    constructor(data?: IFilterResponseModelOfProjectLineTableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ProjectLineTableViewModel.fromJS(item));
            }
            this.total = _data["total"] !== undefined ? _data["total"] : <any>null;
        }
    }

    static fromJS(data: any): FilterResponseModelOfProjectLineTableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FilterResponseModelOfProjectLineTableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["total"] = this.total !== undefined ? this.total : <any>null;
        return data; 
    }
}

export interface IFilterResponseModelOfProjectLineTableViewModel {
    data?: ProjectLineTableViewModel[] | null;
    total: number;
}

export class ProjectLineTableViewModel implements IProjectLineTableViewModel {
    id!: number;
    projectId!: number;
    projectName?: string | null;
    number?: number | null;
    statusId?: string | null;
    statusName?: string | null;
    description?: string | null;
    customerDescription?: string | null;
    barcode?: string | null;
    customerNumber?: string | null;
    oemNumber?: string | null;
    nickNameIndia?: string | null;
    nickNameAustralia?: string | null;
    materialId?: number | null;
    weight?: number | null;
    unitPackagedQty?: number | null;
    fileDoc?: string | null;

    constructor(data?: IProjectLineTableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.projectId = _data["projectId"] !== undefined ? _data["projectId"] : <any>null;
            this.projectName = _data["projectName"] !== undefined ? _data["projectName"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.statusId = _data["statusId"] !== undefined ? _data["statusId"] : <any>null;
            this.statusName = _data["statusName"] !== undefined ? _data["statusName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.customerDescription = _data["customerDescription"] !== undefined ? _data["customerDescription"] : <any>null;
            this.barcode = _data["barcode"] !== undefined ? _data["barcode"] : <any>null;
            this.customerNumber = _data["customerNumber"] !== undefined ? _data["customerNumber"] : <any>null;
            this.oemNumber = _data["oemNumber"] !== undefined ? _data["oemNumber"] : <any>null;
            this.nickNameIndia = _data["nickNameIndia"] !== undefined ? _data["nickNameIndia"] : <any>null;
            this.nickNameAustralia = _data["nickNameAustralia"] !== undefined ? _data["nickNameAustralia"] : <any>null;
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.weight = _data["weight"] !== undefined ? _data["weight"] : <any>null;
            this.unitPackagedQty = _data["unitPackagedQty"] !== undefined ? _data["unitPackagedQty"] : <any>null;
            this.fileDoc = _data["fileDoc"] !== undefined ? _data["fileDoc"] : <any>null;
        }
    }

    static fromJS(data: any): ProjectLineTableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectLineTableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["projectId"] = this.projectId !== undefined ? this.projectId : <any>null;
        data["projectName"] = this.projectName !== undefined ? this.projectName : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
        data["statusName"] = this.statusName !== undefined ? this.statusName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["customerDescription"] = this.customerDescription !== undefined ? this.customerDescription : <any>null;
        data["barcode"] = this.barcode !== undefined ? this.barcode : <any>null;
        data["customerNumber"] = this.customerNumber !== undefined ? this.customerNumber : <any>null;
        data["oemNumber"] = this.oemNumber !== undefined ? this.oemNumber : <any>null;
        data["nickNameIndia"] = this.nickNameIndia !== undefined ? this.nickNameIndia : <any>null;
        data["nickNameAustralia"] = this.nickNameAustralia !== undefined ? this.nickNameAustralia : <any>null;
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        data["unitPackagedQty"] = this.unitPackagedQty !== undefined ? this.unitPackagedQty : <any>null;
        data["fileDoc"] = this.fileDoc !== undefined ? this.fileDoc : <any>null;
        return data; 
    }
}

export interface IProjectLineTableViewModel {
    id: number;
    projectId: number;
    projectName?: string | null;
    number?: number | null;
    statusId?: string | null;
    statusName?: string | null;
    description?: string | null;
    customerDescription?: string | null;
    barcode?: string | null;
    customerNumber?: string | null;
    oemNumber?: string | null;
    nickNameIndia?: string | null;
    nickNameAustralia?: string | null;
    materialId?: number | null;
    weight?: number | null;
    unitPackagedQty?: number | null;
    fileDoc?: string | null;
}

export class FilterModel implements IFilterModel {
    pagination?: Pagination | null;

    constructor(data?: IFilterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pagination = _data["pagination"] ? Pagination.fromJS(_data["pagination"]) : <any>null;
        }
    }

    static fromJS(data: any): FilterModel {
        data = typeof data === 'object' ? data : {};
        let result = new FilterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pagination"] = this.pagination ? this.pagination.toJSON() : <any>null;
        return data; 
    }
}

export interface IFilterModel {
    pagination?: Pagination | null;
}

export class FilterProjectLinesModel extends FilterModel implements IFilterProjectLinesModel {
    projectName?: string | null;
    lineNumber?: number | null;
    barcode?: string | null;
    nickname?: string | null;
    statusId?: string | null;

    constructor(data?: IFilterProjectLinesModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projectName = _data["projectName"] !== undefined ? _data["projectName"] : <any>null;
            this.lineNumber = _data["lineNumber"] !== undefined ? _data["lineNumber"] : <any>null;
            this.barcode = _data["barcode"] !== undefined ? _data["barcode"] : <any>null;
            this.nickname = _data["nickname"] !== undefined ? _data["nickname"] : <any>null;
            this.statusId = _data["statusId"] !== undefined ? _data["statusId"] : <any>null;
        }
    }

    static fromJS(data: any): FilterProjectLinesModel {
        data = typeof data === 'object' ? data : {};
        let result = new FilterProjectLinesModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectName"] = this.projectName !== undefined ? this.projectName : <any>null;
        data["lineNumber"] = this.lineNumber !== undefined ? this.lineNumber : <any>null;
        data["barcode"] = this.barcode !== undefined ? this.barcode : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFilterProjectLinesModel extends IFilterModel {
    projectName?: string | null;
    lineNumber?: number | null;
    barcode?: string | null;
    nickname?: string | null;
    statusId?: string | null;
}

export class Pagination implements IPagination {
    skip?: number | null;
    take?: number | null;
    dir?: string | null;
    field?: string | null;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.skip = _data["skip"] !== undefined ? _data["skip"] : <any>null;
            this.take = _data["take"] !== undefined ? _data["take"] : <any>null;
            this.dir = _data["dir"] !== undefined ? _data["dir"] : <any>null;
            this.field = _data["field"] !== undefined ? _data["field"] : <any>null;
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["skip"] = this.skip !== undefined ? this.skip : <any>null;
        data["take"] = this.take !== undefined ? this.take : <any>null;
        data["dir"] = this.dir !== undefined ? this.dir : <any>null;
        data["field"] = this.field !== undefined ? this.field : <any>null;
        return data; 
    }
}

export interface IPagination {
    skip?: number | null;
    take?: number | null;
    dir?: string | null;
    field?: string | null;
}

export class ProjectViewModel implements IProjectViewModel {
    id!: number;
    name?: string | null;
    projectLines?: ProjectLineViewModel[] | null;

    constructor(data?: IProjectViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["projectLines"])) {
                this.projectLines = [] as any;
                for (let item of _data["projectLines"])
                    this.projectLines!.push(ProjectLineViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProjectViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.projectLines)) {
            data["projectLines"] = [];
            for (let item of this.projectLines)
                data["projectLines"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProjectViewModel {
    id: number;
    name?: string | null;
    projectLines?: ProjectLineViewModel[] | null;
}

export class RoleViewModel implements IRoleViewModel {
    id?: string | null;
    name?: string | null;
    normalizedName?: string | null;

    constructor(data?: IRoleViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.normalizedName = _data["normalizedName"] !== undefined ? _data["normalizedName"] : <any>null;
        }
    }

    static fromJS(data: any): RoleViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoleViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : <any>null;
        return data; 
    }
}

export interface IRoleViewModel {
    id?: string | null;
    name?: string | null;
    normalizedName?: string | null;
}

export class EditPermissionViewModel implements IEditPermissionViewModel {
    id!: string;
    value?: string | null;
    access?: AccessEnum | null;

    constructor(data?: IEditPermissionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.access = _data["access"] !== undefined ? _data["access"] : <any>null;
        }
    }

    static fromJS(data: any): EditPermissionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EditPermissionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        return data; 
    }
}

export interface IEditPermissionViewModel {
    id: string;
    value?: string | null;
    access?: AccessEnum | null;
}

export class RoleParams implements IRoleParams {
    roleName?: string | null;
    userId?: string | null;

    constructor(data?: IRoleParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): RoleParams {
        data = typeof data === 'object' ? data : {};
        let result = new RoleParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data; 
    }
}

export interface IRoleParams {
    roleName?: string | null;
    userId?: string | null;
}

export class UserRegisterViewModel implements IUserRegisterViewModel {
    email!: string;
    phoneNumber!: string;
    password!: string;
    lastName!: string;
    firstName!: string;
    token?: string | null;

    constructor(data?: IUserRegisterViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
        }
    }

    static fromJS(data: any): UserRegisterViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data; 
    }
}

export interface IUserRegisterViewModel {
    email: string;
    phoneNumber: string;
    password: string;
    lastName: string;
    firstName: string;
    token?: string | null;
}

export class ConfirmEmail implements IConfirmEmail {
    userId!: string;
    code!: string;

    constructor(data?: IConfirmEmail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
        }
    }

    static fromJS(data: any): ConfirmEmail {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmEmail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        return data; 
    }
}

export interface IConfirmEmail {
    userId: string;
    code: string;
}

export class ChangePasswordViewModel implements IChangePasswordViewModel {
    currentPassword!: string;
    newPassword!: string;
    confirmPassword?: string | null;

    constructor(data?: IChangePasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"] !== undefined ? _data["currentPassword"] : <any>null;
            this.newPassword = _data["newPassword"] !== undefined ? _data["newPassword"] : <any>null;
            this.confirmPassword = _data["confirmPassword"] !== undefined ? _data["confirmPassword"] : <any>null;
        }
    }

    static fromJS(data: any): ChangePasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword !== undefined ? this.currentPassword : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        data["confirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : <any>null;
        return data; 
    }
}

export interface IChangePasswordViewModel {
    currentPassword: string;
    newPassword: string;
    confirmPassword?: string | null;
}

export class ForgotPasswordViewModel implements IForgotPasswordViewModel {
    email!: string;

    constructor(data?: IForgotPasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
        }
    }

    static fromJS(data: any): ForgotPasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data; 
    }
}

export interface IForgotPasswordViewModel {
    email: string;
}

export class ResetPasswordViewModel implements IResetPasswordViewModel {
    email!: string;
    password!: string;
    confirmPassword?: string | null;
    code?: string | null;

    constructor(data?: IResetPasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.confirmPassword = _data["confirmPassword"] !== undefined ? _data["confirmPassword"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
        }
    }

    static fromJS(data: any): ResetPasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["confirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        return data; 
    }
}

export interface IResetPasswordViewModel {
    email: string;
    password: string;
    confirmPassword?: string | null;
    code?: string | null;
}

export class UserViewModel implements IUserViewModel {
    id?: string | null;
    email!: string;
    firstName!: string;
    lastName!: string;
    userName!: string;
    password?: string | null;
    phoneNumber?: string | null;
    isActive!: boolean;
    isAllProjectsAllowed!: boolean;
    countryId?: number | null;
    country?: CountryViewModel | null;
    roleId!: string;
    userProjectIds?: number[] | null;

    constructor(data?: IUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isAllProjectsAllowed = _data["isAllProjectsAllowed"] !== undefined ? _data["isAllProjectsAllowed"] : <any>null;
            this.countryId = _data["countryId"] !== undefined ? _data["countryId"] : <any>null;
            this.country = _data["country"] ? CountryViewModel.fromJS(_data["country"]) : <any>null;
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            if (Array.isArray(_data["userProjectIds"])) {
                this.userProjectIds = [] as any;
                for (let item of _data["userProjectIds"])
                    this.userProjectIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UserViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isAllProjectsAllowed"] = this.isAllProjectsAllowed !== undefined ? this.isAllProjectsAllowed : <any>null;
        data["countryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["country"] = this.country ? this.country.toJSON() : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        if (Array.isArray(this.userProjectIds)) {
            data["userProjectIds"] = [];
            for (let item of this.userProjectIds)
                data["userProjectIds"].push(item);
        }
        return data; 
    }
}

export interface IUserViewModel {
    id?: string | null;
    email: string;
    firstName: string;
    lastName: string;
    userName: string;
    password?: string | null;
    phoneNumber?: string | null;
    isActive: boolean;
    isAllProjectsAllowed: boolean;
    countryId?: number | null;
    country?: CountryViewModel | null;
    roleId: string;
    userProjectIds?: number[] | null;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | null;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed!: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed!: boolean;
    twoFactorEnabled!: boolean;
    lockoutEnd?: Date | null;
    lockoutEnabled!: boolean;
    accessFailedCount!: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.normalizedUserName = _data["normalizedUserName"] !== undefined ? _data["normalizedUserName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.normalizedEmail = _data["normalizedEmail"] !== undefined ? _data["normalizedEmail"] : <any>null;
            this.emailConfirmed = _data["emailConfirmed"] !== undefined ? _data["emailConfirmed"] : <any>null;
            this.passwordHash = _data["passwordHash"] !== undefined ? _data["passwordHash"] : <any>null;
            this.securityStamp = _data["securityStamp"] !== undefined ? _data["securityStamp"] : <any>null;
            this.concurrencyStamp = _data["concurrencyStamp"] !== undefined ? _data["concurrencyStamp"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"] !== undefined ? _data["phoneNumberConfirmed"] : <any>null;
            this.twoFactorEnabled = _data["twoFactorEnabled"] !== undefined ? _data["twoFactorEnabled"] : <any>null;
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>null;
            this.lockoutEnabled = _data["lockoutEnabled"] !== undefined ? _data["lockoutEnabled"] : <any>null;
            this.accessFailedCount = _data["accessFailedCount"] !== undefined ? _data["accessFailedCount"] : <any>null;
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["normalizedUserName"] = this.normalizedUserName !== undefined ? this.normalizedUserName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["normalizedEmail"] = this.normalizedEmail !== undefined ? this.normalizedEmail : <any>null;
        data["emailConfirmed"] = this.emailConfirmed !== undefined ? this.emailConfirmed : <any>null;
        data["passwordHash"] = this.passwordHash !== undefined ? this.passwordHash : <any>null;
        data["securityStamp"] = this.securityStamp !== undefined ? this.securityStamp : <any>null;
        data["concurrencyStamp"] = this.concurrencyStamp !== undefined ? this.concurrencyStamp : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed !== undefined ? this.phoneNumberConfirmed : <any>null;
        data["twoFactorEnabled"] = this.twoFactorEnabled !== undefined ? this.twoFactorEnabled : <any>null;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>null;
        data["lockoutEnabled"] = this.lockoutEnabled !== undefined ? this.lockoutEnabled : <any>null;
        data["accessFailedCount"] = this.accessFailedCount !== undefined ? this.accessFailedCount : <any>null;
        return data; 
    }
}

export interface IIdentityUserOfString {
    id?: string | null;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd?: Date | null;
    lockoutEnabled: boolean;
    accessFailedCount: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class ApplicationUser extends IdentityUser implements IApplicationUser {
    userNumber!: number;
    lastName?: string | null;
    firstName?: string | null;
    dateCreated!: Date;
    dateModified!: Date;
    rowVersion?: string | null;
    dateLastAccessed!: Date;
    isActive!: boolean;
    isAllProjectsAllowed!: boolean;
    countryId?: number | null;
    country?: Country | null;
    userRoles?: ApplicationUserRole[] | null;
    userProjects?: UserProject[] | null;

    constructor(data?: IApplicationUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userNumber = _data["userNumber"] !== undefined ? _data["userNumber"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>null;
            this.dateModified = _data["dateModified"] ? new Date(_data["dateModified"].toString()) : <any>null;
            this.rowVersion = _data["rowVersion"] !== undefined ? _data["rowVersion"] : <any>null;
            this.dateLastAccessed = _data["dateLastAccessed"] ? new Date(_data["dateLastAccessed"].toString()) : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isAllProjectsAllowed = _data["isAllProjectsAllowed"] !== undefined ? _data["isAllProjectsAllowed"] : <any>null;
            this.countryId = _data["countryId"] !== undefined ? _data["countryId"] : <any>null;
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>null;
            if (Array.isArray(_data["userRoles"])) {
                this.userRoles = [] as any;
                for (let item of _data["userRoles"])
                    this.userRoles!.push(ApplicationUserRole.fromJS(item));
            }
            if (Array.isArray(_data["userProjects"])) {
                this.userProjects = [] as any;
                for (let item of _data["userProjects"])
                    this.userProjects!.push(UserProject.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNumber"] = this.userNumber !== undefined ? this.userNumber : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>null;
        data["rowVersion"] = this.rowVersion !== undefined ? this.rowVersion : <any>null;
        data["dateLastAccessed"] = this.dateLastAccessed ? this.dateLastAccessed.toISOString() : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isAllProjectsAllowed"] = this.isAllProjectsAllowed !== undefined ? this.isAllProjectsAllowed : <any>null;
        data["countryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["country"] = this.country ? this.country.toJSON() : <any>null;
        if (Array.isArray(this.userRoles)) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.userProjects)) {
            data["userProjects"] = [];
            for (let item of this.userProjects)
                data["userProjects"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationUser extends IIdentityUser {
    userNumber: number;
    lastName?: string | null;
    firstName?: string | null;
    dateCreated: Date;
    dateModified: Date;
    rowVersion?: string | null;
    dateLastAccessed: Date;
    isActive: boolean;
    isAllProjectsAllowed: boolean;
    countryId?: number | null;
    country?: Country | null;
    userRoles?: ApplicationUserRole[] | null;
    userProjects?: UserProject[] | null;
}

export class Country implements ICountry {
    id!: number;
    name?: string | null;
    fileDoc?: string | null;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.fileDoc = _data["fileDoc"] !== undefined ? _data["fileDoc"] : <any>null;
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["fileDoc"] = this.fileDoc !== undefined ? this.fileDoc : <any>null;
        return data; 
    }
}

export interface ICountry {
    id: number;
    name?: string | null;
    fileDoc?: string | null;
}

export class IdentityUserRoleOfString implements IIdentityUserRoleOfString {
    userId?: string | null;
    roleId?: string | null;

    constructor(data?: IIdentityUserRoleOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
        }
    }

    static fromJS(data: any): IdentityUserRoleOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserRoleOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        return data; 
    }
}

export interface IIdentityUserRoleOfString {
    userId?: string | null;
    roleId?: string | null;
}

export class ApplicationUserRole extends IdentityUserRoleOfString implements IApplicationUserRole {
    id!: number;
    user?: ApplicationUser | null;
    role?: ApplicationRole | null;

    constructor(data?: IApplicationUserRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.user = _data["user"] ? ApplicationUser.fromJS(_data["user"]) : <any>null;
            this.role = _data["role"] ? ApplicationRole.fromJS(_data["role"]) : <any>null;
        }
    }

    static fromJS(data: any): ApplicationUserRole {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["role"] = this.role ? this.role.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationUserRole extends IIdentityUserRoleOfString {
    id: number;
    user?: ApplicationUser | null;
    role?: ApplicationRole | null;
}

export class IdentityRoleOfString implements IIdentityRoleOfString {
    id?: string | null;
    name?: string | null;
    normalizedName?: string | null;
    concurrencyStamp?: string | null;

    constructor(data?: IIdentityRoleOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.normalizedName = _data["normalizedName"] !== undefined ? _data["normalizedName"] : <any>null;
            this.concurrencyStamp = _data["concurrencyStamp"] !== undefined ? _data["concurrencyStamp"] : <any>null;
        }
    }

    static fromJS(data: any): IdentityRoleOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityRoleOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : <any>null;
        data["concurrencyStamp"] = this.concurrencyStamp !== undefined ? this.concurrencyStamp : <any>null;
        return data; 
    }
}

export interface IIdentityRoleOfString {
    id?: string | null;
    name?: string | null;
    normalizedName?: string | null;
    concurrencyStamp?: string | null;
}

export class IdentityRole extends IdentityRoleOfString implements IIdentityRole {

    constructor(data?: IIdentityRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityRole {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityRole extends IIdentityRoleOfString {
}

export class ApplicationRole extends IdentityRole implements IApplicationRole {
    userRoles?: ApplicationUserRole[] | null;

    constructor(data?: IApplicationRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["userRoles"])) {
                this.userRoles = [] as any;
                for (let item of _data["userRoles"])
                    this.userRoles!.push(ApplicationUserRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicationRole {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userRoles)) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationRole extends IIdentityRole {
    userRoles?: ApplicationUserRole[] | null;
}

export class UserProject implements IUserProject {
    id!: number;
    userId?: string | null;
    user?: ApplicationUser | null;
    projectId!: number;
    project?: Project | null;

    constructor(data?: IUserProject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.user = _data["user"] ? ApplicationUser.fromJS(_data["user"]) : <any>null;
            this.projectId = _data["projectId"] !== undefined ? _data["projectId"] : <any>null;
            this.project = _data["project"] ? Project.fromJS(_data["project"]) : <any>null;
        }
    }

    static fromJS(data: any): UserProject {
        data = typeof data === 'object' ? data : {};
        let result = new UserProject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["projectId"] = this.projectId !== undefined ? this.projectId : <any>null;
        data["project"] = this.project ? this.project.toJSON() : <any>null;
        return data; 
    }
}

export interface IUserProject {
    id: number;
    userId?: string | null;
    user?: ApplicationUser | null;
    projectId: number;
    project?: Project | null;
}

export class Project implements IProject {
    id!: number;
    name?: string | null;
    dateCreated!: Date;
    dateUpdated!: Date;
    updatedBy?: string | null;
    createdBy?: string | null;
    projectLines?: ProjectLine[] | null;

    constructor(data?: IProject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>null;
            this.dateUpdated = _data["dateUpdated"] ? new Date(_data["dateUpdated"].toString()) : <any>null;
            this.updatedBy = _data["updatedBy"] !== undefined ? _data["updatedBy"] : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            if (Array.isArray(_data["projectLines"])) {
                this.projectLines = [] as any;
                for (let item of _data["projectLines"])
                    this.projectLines!.push(ProjectLine.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Project {
        data = typeof data === 'object' ? data : {};
        let result = new Project();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateUpdated"] = this.dateUpdated ? this.dateUpdated.toISOString() : <any>null;
        data["updatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        if (Array.isArray(this.projectLines)) {
            data["projectLines"] = [];
            for (let item of this.projectLines)
                data["projectLines"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProject {
    id: number;
    name?: string | null;
    dateCreated: Date;
    dateUpdated: Date;
    updatedBy?: string | null;
    createdBy?: string | null;
    projectLines?: ProjectLine[] | null;
}

export class ProjectLine implements IProjectLine {
    id!: number;
    number!: number;
    description?: string | null;
    customerDescription?: string | null;
    barcode?: string | null;
    oldSystemPartNumber?: string | null;
    customerNumber?: string | null;
    oemNumber?: string | null;
    groupId?: string | null;
    nickNameIndia?: string | null;
    nickNameAustralia?: string | null;
    economManufacturerQty?: number | null;
    inventoredItem?: number | null;
    maxStockQty?: number | null;
    minStockQty?: number | null;
    productionLocation?: string | null;
    rawCost?: number | null;
    processCost?: number | null;
    totalCost?: number | null;
    recoringToolingCost?: number | null;
    manualOrderQty?: number | null;
    totalOrderQty?: number | null;
    liveOrder?: number | null;
    finalCompletionDate?: Date | null;
    typeOfProductionId?: string | null;
    dispatchModeId?: string | null;
    weight?: number | null;
    unitPackagedQty?: number | null;
    priceOld?: number | null;
    priceCurrent!: number;
    rackLocationAU?: string | null;
    salesOrderNumber?: string | null;
    productionTeamInstructions?: string | null;
    mjInstructions?: string | null;
    shippingTrackingNumber?: string | null;
    patternLocationAU?: string | null;
    patternLocationIND?: string | null;
    partDelivery?: number | null;
    backorderQty?: number | null;
    dateUpdated!: Date;
    dateCreated!: Date;
    updatedBy!: string;
    createdBy!: string;
    projectId!: number;
    project?: Project | null;
    statusId!: string;
    status?: ListItem | null;
    currencyId!: string;
    currency?: ListItem | null;
    document?: Documentation | null;
    materialId?: string | null;
    material?: ListItem | null;

    constructor(data?: IProjectLine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.customerDescription = _data["customerDescription"] !== undefined ? _data["customerDescription"] : <any>null;
            this.barcode = _data["barcode"] !== undefined ? _data["barcode"] : <any>null;
            this.oldSystemPartNumber = _data["oldSystemPartNumber"] !== undefined ? _data["oldSystemPartNumber"] : <any>null;
            this.customerNumber = _data["customerNumber"] !== undefined ? _data["customerNumber"] : <any>null;
            this.oemNumber = _data["oemNumber"] !== undefined ? _data["oemNumber"] : <any>null;
            this.groupId = _data["groupId"] !== undefined ? _data["groupId"] : <any>null;
            this.nickNameIndia = _data["nickNameIndia"] !== undefined ? _data["nickNameIndia"] : <any>null;
            this.nickNameAustralia = _data["nickNameAustralia"] !== undefined ? _data["nickNameAustralia"] : <any>null;
            this.economManufacturerQty = _data["economManufacturerQty"] !== undefined ? _data["economManufacturerQty"] : <any>null;
            this.inventoredItem = _data["inventoredItem"] !== undefined ? _data["inventoredItem"] : <any>null;
            this.maxStockQty = _data["maxStockQty"] !== undefined ? _data["maxStockQty"] : <any>null;
            this.minStockQty = _data["minStockQty"] !== undefined ? _data["minStockQty"] : <any>null;
            this.productionLocation = _data["productionLocation"] !== undefined ? _data["productionLocation"] : <any>null;
            this.rawCost = _data["rawCost"] !== undefined ? _data["rawCost"] : <any>null;
            this.processCost = _data["processCost"] !== undefined ? _data["processCost"] : <any>null;
            this.totalCost = _data["totalCost"] !== undefined ? _data["totalCost"] : <any>null;
            this.recoringToolingCost = _data["recoringToolingCost"] !== undefined ? _data["recoringToolingCost"] : <any>null;
            this.manualOrderQty = _data["manualOrderQty"] !== undefined ? _data["manualOrderQty"] : <any>null;
            this.totalOrderQty = _data["totalOrderQty"] !== undefined ? _data["totalOrderQty"] : <any>null;
            this.liveOrder = _data["liveOrder"] !== undefined ? _data["liveOrder"] : <any>null;
            this.finalCompletionDate = _data["finalCompletionDate"] ? new Date(_data["finalCompletionDate"].toString()) : <any>null;
            this.typeOfProductionId = _data["typeOfProductionId"] !== undefined ? _data["typeOfProductionId"] : <any>null;
            this.dispatchModeId = _data["dispatchModeId"] !== undefined ? _data["dispatchModeId"] : <any>null;
            this.weight = _data["weight"] !== undefined ? _data["weight"] : <any>null;
            this.unitPackagedQty = _data["unitPackagedQty"] !== undefined ? _data["unitPackagedQty"] : <any>null;
            this.priceOld = _data["priceOld"] !== undefined ? _data["priceOld"] : <any>null;
            this.priceCurrent = _data["priceCurrent"] !== undefined ? _data["priceCurrent"] : <any>null;
            this.rackLocationAU = _data["rackLocationAU"] !== undefined ? _data["rackLocationAU"] : <any>null;
            this.salesOrderNumber = _data["salesOrderNumber"] !== undefined ? _data["salesOrderNumber"] : <any>null;
            this.productionTeamInstructions = _data["productionTeamInstructions"] !== undefined ? _data["productionTeamInstructions"] : <any>null;
            this.mjInstructions = _data["mjInstructions"] !== undefined ? _data["mjInstructions"] : <any>null;
            this.shippingTrackingNumber = _data["shippingTrackingNumber"] !== undefined ? _data["shippingTrackingNumber"] : <any>null;
            this.patternLocationAU = _data["patternLocationAU"] !== undefined ? _data["patternLocationAU"] : <any>null;
            this.patternLocationIND = _data["patternLocationIND"] !== undefined ? _data["patternLocationIND"] : <any>null;
            this.partDelivery = _data["partDelivery"] !== undefined ? _data["partDelivery"] : <any>null;
            this.backorderQty = _data["backorderQty"] !== undefined ? _data["backorderQty"] : <any>null;
            this.dateUpdated = _data["dateUpdated"] ? new Date(_data["dateUpdated"].toString()) : <any>null;
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>null;
            this.updatedBy = _data["updatedBy"] !== undefined ? _data["updatedBy"] : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.projectId = _data["projectId"] !== undefined ? _data["projectId"] : <any>null;
            this.project = _data["project"] ? Project.fromJS(_data["project"]) : <any>null;
            this.statusId = _data["statusId"] !== undefined ? _data["statusId"] : <any>null;
            this.status = _data["status"] ? ListItem.fromJS(_data["status"]) : <any>null;
            this.currencyId = _data["currencyId"] !== undefined ? _data["currencyId"] : <any>null;
            this.currency = _data["currency"] ? ListItem.fromJS(_data["currency"]) : <any>null;
            this.document = _data["document"] ? Documentation.fromJS(_data["document"]) : <any>null;
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.material = _data["material"] ? ListItem.fromJS(_data["material"]) : <any>null;
        }
    }

    static fromJS(data: any): ProjectLine {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectLine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["customerDescription"] = this.customerDescription !== undefined ? this.customerDescription : <any>null;
        data["barcode"] = this.barcode !== undefined ? this.barcode : <any>null;
        data["oldSystemPartNumber"] = this.oldSystemPartNumber !== undefined ? this.oldSystemPartNumber : <any>null;
        data["customerNumber"] = this.customerNumber !== undefined ? this.customerNumber : <any>null;
        data["oemNumber"] = this.oemNumber !== undefined ? this.oemNumber : <any>null;
        data["groupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        data["nickNameIndia"] = this.nickNameIndia !== undefined ? this.nickNameIndia : <any>null;
        data["nickNameAustralia"] = this.nickNameAustralia !== undefined ? this.nickNameAustralia : <any>null;
        data["economManufacturerQty"] = this.economManufacturerQty !== undefined ? this.economManufacturerQty : <any>null;
        data["inventoredItem"] = this.inventoredItem !== undefined ? this.inventoredItem : <any>null;
        data["maxStockQty"] = this.maxStockQty !== undefined ? this.maxStockQty : <any>null;
        data["minStockQty"] = this.minStockQty !== undefined ? this.minStockQty : <any>null;
        data["productionLocation"] = this.productionLocation !== undefined ? this.productionLocation : <any>null;
        data["rawCost"] = this.rawCost !== undefined ? this.rawCost : <any>null;
        data["processCost"] = this.processCost !== undefined ? this.processCost : <any>null;
        data["totalCost"] = this.totalCost !== undefined ? this.totalCost : <any>null;
        data["recoringToolingCost"] = this.recoringToolingCost !== undefined ? this.recoringToolingCost : <any>null;
        data["manualOrderQty"] = this.manualOrderQty !== undefined ? this.manualOrderQty : <any>null;
        data["totalOrderQty"] = this.totalOrderQty !== undefined ? this.totalOrderQty : <any>null;
        data["liveOrder"] = this.liveOrder !== undefined ? this.liveOrder : <any>null;
        data["finalCompletionDate"] = this.finalCompletionDate ? this.finalCompletionDate.toISOString() : <any>null;
        data["typeOfProductionId"] = this.typeOfProductionId !== undefined ? this.typeOfProductionId : <any>null;
        data["dispatchModeId"] = this.dispatchModeId !== undefined ? this.dispatchModeId : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        data["unitPackagedQty"] = this.unitPackagedQty !== undefined ? this.unitPackagedQty : <any>null;
        data["priceOld"] = this.priceOld !== undefined ? this.priceOld : <any>null;
        data["priceCurrent"] = this.priceCurrent !== undefined ? this.priceCurrent : <any>null;
        data["rackLocationAU"] = this.rackLocationAU !== undefined ? this.rackLocationAU : <any>null;
        data["salesOrderNumber"] = this.salesOrderNumber !== undefined ? this.salesOrderNumber : <any>null;
        data["productionTeamInstructions"] = this.productionTeamInstructions !== undefined ? this.productionTeamInstructions : <any>null;
        data["mjInstructions"] = this.mjInstructions !== undefined ? this.mjInstructions : <any>null;
        data["shippingTrackingNumber"] = this.shippingTrackingNumber !== undefined ? this.shippingTrackingNumber : <any>null;
        data["patternLocationAU"] = this.patternLocationAU !== undefined ? this.patternLocationAU : <any>null;
        data["patternLocationIND"] = this.patternLocationIND !== undefined ? this.patternLocationIND : <any>null;
        data["partDelivery"] = this.partDelivery !== undefined ? this.partDelivery : <any>null;
        data["backorderQty"] = this.backorderQty !== undefined ? this.backorderQty : <any>null;
        data["dateUpdated"] = this.dateUpdated ? this.dateUpdated.toISOString() : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["updatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["projectId"] = this.projectId !== undefined ? this.projectId : <any>null;
        data["project"] = this.project ? this.project.toJSON() : <any>null;
        data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
        data["status"] = this.status ? this.status.toJSON() : <any>null;
        data["currencyId"] = this.currencyId !== undefined ? this.currencyId : <any>null;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>null;
        data["document"] = this.document ? this.document.toJSON() : <any>null;
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["material"] = this.material ? this.material.toJSON() : <any>null;
        return data; 
    }
}

export interface IProjectLine {
    id: number;
    number: number;
    description?: string | null;
    customerDescription?: string | null;
    barcode?: string | null;
    oldSystemPartNumber?: string | null;
    customerNumber?: string | null;
    oemNumber?: string | null;
    groupId?: string | null;
    nickNameIndia?: string | null;
    nickNameAustralia?: string | null;
    economManufacturerQty?: number | null;
    inventoredItem?: number | null;
    maxStockQty?: number | null;
    minStockQty?: number | null;
    productionLocation?: string | null;
    rawCost?: number | null;
    processCost?: number | null;
    totalCost?: number | null;
    recoringToolingCost?: number | null;
    manualOrderQty?: number | null;
    totalOrderQty?: number | null;
    liveOrder?: number | null;
    finalCompletionDate?: Date | null;
    typeOfProductionId?: string | null;
    dispatchModeId?: string | null;
    weight?: number | null;
    unitPackagedQty?: number | null;
    priceOld?: number | null;
    priceCurrent: number;
    rackLocationAU?: string | null;
    salesOrderNumber?: string | null;
    productionTeamInstructions?: string | null;
    mjInstructions?: string | null;
    shippingTrackingNumber?: string | null;
    patternLocationAU?: string | null;
    patternLocationIND?: string | null;
    partDelivery?: number | null;
    backorderQty?: number | null;
    dateUpdated: Date;
    dateCreated: Date;
    updatedBy: string;
    createdBy: string;
    projectId: number;
    project?: Project | null;
    statusId: string;
    status?: ListItem | null;
    currencyId: string;
    currency?: ListItem | null;
    document?: Documentation | null;
    materialId?: string | null;
    material?: ListItem | null;
}

export class ListItem implements IListItem {
    id!: string;
    value?: string | null;
    order!: number;
    readOnly!: boolean;
    updatedDate!: Date;
    updatedBy?: string | null;
    isActive!: boolean;
    parentId?: number | null;
    listTypeId!: ListTypeEnum;
    listType?: ListType | null;
    permissions?: RolePermission[] | null;

    constructor(data?: IListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.order = _data["order"] !== undefined ? _data["order"] : <any>null;
            this.readOnly = _data["readOnly"] !== undefined ? _data["readOnly"] : <any>null;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>null;
            this.updatedBy = _data["updatedBy"] !== undefined ? _data["updatedBy"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
            this.listTypeId = _data["listTypeId"] !== undefined ? _data["listTypeId"] : <any>null;
            this.listType = _data["listType"] ? ListType.fromJS(_data["listType"]) : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(RolePermission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["order"] = this.order !== undefined ? this.order : <any>null;
        data["readOnly"] = this.readOnly !== undefined ? this.readOnly : <any>null;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["updatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["listTypeId"] = this.listTypeId !== undefined ? this.listTypeId : <any>null;
        data["listType"] = this.listType ? this.listType.toJSON() : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListItem {
    id: string;
    value?: string | null;
    order: number;
    readOnly: boolean;
    updatedDate: Date;
    updatedBy?: string | null;
    isActive: boolean;
    parentId?: number | null;
    listTypeId: ListTypeEnum;
    listType?: ListType | null;
    permissions?: RolePermission[] | null;
}

export class ListType implements IListType {
    id!: ListTypeEnum;
    name?: string | null;
    readOnly!: boolean;
    isActive!: boolean;
    isTree?: boolean | null;

    constructor(data?: IListType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.readOnly = _data["readOnly"] !== undefined ? _data["readOnly"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isTree = _data["isTree"] !== undefined ? _data["isTree"] : <any>null;
        }
    }

    static fromJS(data: any): ListType {
        data = typeof data === 'object' ? data : {};
        let result = new ListType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["readOnly"] = this.readOnly !== undefined ? this.readOnly : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isTree"] = this.isTree !== undefined ? this.isTree : <any>null;
        return data; 
    }
}

export interface IListType {
    id: ListTypeEnum;
    name?: string | null;
    readOnly: boolean;
    isActive: boolean;
    isTree?: boolean | null;
}

export class RolePermission implements IRolePermission {
    id!: number;
    access!: AccessEnum;
    permissionId!: string;
    permission?: ListItem | null;
    roleId?: string | null;
    role?: ApplicationRole | null;

    constructor(data?: IRolePermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.access = _data["access"] !== undefined ? _data["access"] : <any>null;
            this.permissionId = _data["permissionId"] !== undefined ? _data["permissionId"] : <any>null;
            this.permission = _data["permission"] ? ListItem.fromJS(_data["permission"]) : <any>null;
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.role = _data["role"] ? ApplicationRole.fromJS(_data["role"]) : <any>null;
        }
    }

    static fromJS(data: any): RolePermission {
        data = typeof data === 'object' ? data : {};
        let result = new RolePermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["access"] = this.access !== undefined ? this.access : <any>null;
        data["permissionId"] = this.permissionId !== undefined ? this.permissionId : <any>null;
        data["permission"] = this.permission ? this.permission.toJSON() : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["role"] = this.role ? this.role.toJSON() : <any>null;
        return data; 
    }
}

export interface IRolePermission {
    id: number;
    access: AccessEnum;
    permissionId: string;
    permission?: ListItem | null;
    roleId?: string | null;
    role?: ApplicationRole | null;
}

export class Documentation implements IDocumentation {
    id!: number;
    typeId!: number;
    fileName?: string | null;
    name?: string | null;
    fileDoc?: string | null;
    isActive!: boolean;
    contentType?: string | null;
    dateApproved!: Date;
    updatedBy!: string;
    updatedDate!: Date;
    entityId!: number;
    projectLine?: ProjectLine | null;

    constructor(data?: IDocumentation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.typeId = _data["typeId"] !== undefined ? _data["typeId"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.fileDoc = _data["fileDoc"] !== undefined ? _data["fileDoc"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.contentType = _data["contentType"] !== undefined ? _data["contentType"] : <any>null;
            this.dateApproved = _data["dateApproved"] ? new Date(_data["dateApproved"].toString()) : <any>null;
            this.updatedBy = _data["updatedBy"] !== undefined ? _data["updatedBy"] : <any>null;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : <any>null;
            this.entityId = _data["entityId"] !== undefined ? _data["entityId"] : <any>null;
            this.projectLine = _data["projectLine"] ? ProjectLine.fromJS(_data["projectLine"]) : <any>null;
        }
    }

    static fromJS(data: any): Documentation {
        data = typeof data === 'object' ? data : {};
        let result = new Documentation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["typeId"] = this.typeId !== undefined ? this.typeId : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["fileDoc"] = this.fileDoc !== undefined ? this.fileDoc : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["contentType"] = this.contentType !== undefined ? this.contentType : <any>null;
        data["dateApproved"] = this.dateApproved ? this.dateApproved.toISOString() : <any>null;
        data["updatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["entityId"] = this.entityId !== undefined ? this.entityId : <any>null;
        data["projectLine"] = this.projectLine ? this.projectLine.toJSON() : <any>null;
        return data; 
    }
}

export interface IDocumentation {
    id: number;
    typeId: number;
    fileName?: string | null;
    name?: string | null;
    fileDoc?: string | null;
    isActive: boolean;
    contentType?: string | null;
    dateApproved: Date;
    updatedBy: string;
    updatedDate: Date;
    entityId: number;
    projectLine?: ProjectLine | null;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}